# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'f237a386-901a-4392-a906-432d0388cd72'
  imageRepository: 'kpspromadacrbuildtestubuntu'
  containerRegistry: 'kasireg.azurecr.io'
  containerRegistry1: 'acrscannerdev.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'ACR-Scanner-DEv'
        command: 'login'

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: CmdLine@2
      displayName: ScanTrivy
      inputs:
        script: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache aquasec/trivy --exit-code 0 --severity MEDIUM,HIGH --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)
    
    - task: CmdLine@2
      displayName: ScanClair
      inputs:
        script: |
          docker run -d --name db arminc/clair-db:latest |
          docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1 |
          wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64 |
          mv clair-scanner_linux_amd64 clair-scanner |
          chmod +x clair-scanner |
          touch clair-whitelist.yml |
          while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done



